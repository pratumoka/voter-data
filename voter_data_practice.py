# -*- coding: utf-8 -*-
"""Voter_data_practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i0EITCaR5vJ5zAsfVAkEaLLWAx86Ll4T
"""

##Importing the necessary libraries

import pandas as pd
from scipy import stats
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

voter = pd.read_excel('Voter_data.xlsx') #Loading the dataset

voter.head(6) #Taking a glance of the data

voter.info() #Checking for datatypes and null values

voter.describe() #Finding out basic statistics

### Coloumns registered_total, registered_male and registered_female have incorrect (negative) values

sns.histplot(voter, x='registered_total')

sns.histplot(voter, x='registered_male', color = 'red')

sns.histplot(voter, x='registered_female', color = 'g')

voter[voter['registered_total'] < 0]['registered_total'].value_counts() #Checking for the count of incorrect values

voter[voter['registered_male'] < 0]['registered_male'].value_counts() #Checking for the count of incorrect values

voter[voter['registered_female'] < 0]['registered_female'].value_counts()

### Coloumns registered_total, registered_male and registered_female have 22 incorrect (negative) values
## Since the data is for voters, 0 or a positive number is a valid value, whereas a negative count is an invalid value

for x in voter.index: #Replacing the wrong values with None
  if voter.loc[x, "registered_total"] < 0:
    voter.loc[x, "registered_total"] = np.nan

for x in voter.index:
  if voter.loc[x, "registered_male"] < 0:
    voter.loc[x, "registered_male"] = np.nan

for x in voter.index:
  if voter.loc[x, "registered_female"] < 0:
    voter.loc[x, "registered_female"] = np.nan

m_rt = voter["registered_total"].median()
m_rm = voter["registered_male"].median()
m_rf = voter["registered_female"].median()

#As all the histograms are right-skewed, it is best to replace the wrong values with median of the coloumns

voter["registered_total"].fillna(m_rt, inplace = True) #Wrong values (i.e null values) replaced with median of every column
voter["registered_male"].fillna(m_rm, inplace = True)
voter["registered_female"].fillna(m_rf, inplace = True)

voter.info() #Checking once again now that the wrong values are replaced

voter["turnout_rate"] = voter['turnout_total']/voter['registered_total'] #Creating a new coloumn in the dataframe for turnout rate
voter.sample()

voter["turnout_rate"].describe() #Checking turnout rates of individual polling booths

# Max turnout rate = 1.00
# Min turnout rate = 0.00

voter[voter["turnout_rate"] == 1.000000].shape #20 booths recorded the max turnout rate

voter[voter["turnout_rate"] == 0.0].shape #4 booths recorded the min turnout rate

voter.groupby(by='treatment')["treatment_phase"].value_counts() #By treatment, tabulating the number of booths in phases 1 and 2 of the study

(voter.groupby(by='town_id')["turnout_rate"].mean() > 0.75).value_counts() #Not a single district has a total turnout rate of 75% or above

voter["turnout_rate_female"] = voter['turnout_female']/voter['registered_female']
voter.sample()

voter.groupby(by='treatment')['turnout_rate_female'].mean()

temp2 = voter.groupby(by='treatment').get_group(0)['turnout_rate_female']
temp3 = voter.groupby(by='treatment').get_group(1)['turnout_rate_female']

# Avg turnout rate for females in treatment booths = 0.568921
# Avg turnout rate for males in treatment booths = 0.582492

# Doing t-test to test the null hypothesis
# H0 = Female turnout rate in treatment booths is equal to male turnout rate in treatment booths
# H1 = Female turnout rate in treatment booths is greater than to male turnout rate in treatment booths

voter.groupby(by='treatment')['turnout_rate_female'].var() #ratio is less than 4:1 so we can perform two sample t-test

t_statistic, p_value = stats.ttest_ind(temp2, temp3, equal_var=True)
print(t_statistic)
print(p_value)

if p_value < 0.05:
  print("Reject the Null Hypothesis (H0) and Accept the Alternative Hypothesis (H1)")